{"version":3,"sources":["../src/lib/habitat.js","../src/index.js"],"names":["_capetalize","str","replace","all","letter","toUpperCase","_habitatsProps","tag","attr","arguments","length","undefined","attrs","attributes","props","keys","forEach","key","hasOwnProperty","dataAttrName","name","propName","split","pop","propValue","nodeValue","_habitatElms","attrValue","attrKey","hostNodes","call","document","querySelectorAll","queriedTag","getAttribute","push","_getWidgetScriptTag","currentScript","scripts","getElementsByTagName","_getMountAttr","script","mountValue","Widget","hasRendered","q","widget","mountTo","addEventListener","readyState","fun","_render","habitats","concat","parentNode","elm","hostNode","habitatMediaQuery","_getHabitatSizeQuery","preact","render","h"],"mappings":"yPAAA,IASMA,GAAc,SAAAC,SACXA,GAAIC,QAAQ,aAAc,SAACC,EAAKC,SAC9BA,GAAOC,iBASZC,EAAiB,SAACC,MAAKC,GAAyBC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GApBhC,YAqBhBG,EAAQL,EAAIM,WACZC,mBAGGC,KAAKH,GAAOI,QAAQ,SAAAC,MACrBL,EAAMM,eAAeD,GAAM,IACzBE,GAAeP,EAAMK,GAAKG,KAC1BC,EAAWF,EAAaG,MAAMd,EAAAA,KAAYe,WACnCvB,EAAYqB,GACnBF,IAAiBE,EAAU,IACzBG,GAAYZ,EAAMK,GAAKQ,YACrBJ,GAAYG,MAIjBV,GASHY,EAAe,SAACC,MAAWC,GAA4BnB,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GA5CvC,cA6ChBoB,cACDb,QAAQc,KAAKC,SAASC,iBAAT,IAA8BJ,EAA9B,KAA2C,SAAAK,GACrDN,IAAcM,EAAWC,aAAaN,IAAAA,EAC9BO,KAAKF,KAGZJ,GAQHO,EAAsB,iBACnBL,UAASM,eACb,cACKC,GAAUP,SAASQ,qBAAqB,gBACrCD,GAAQA,EAAQ5B,OAAS,OAKhC8B,EAAgB,SAACC,MAAQjC,GAAqBC,UAAAC,OAAA,GAAAC,SAAAF,UAAA,GAAAA,UAAA,GAnElC,aAoEZG,EAAQ6B,EAAO5B,WACf6B,EAAa,mBAEV3B,KAAKH,GAAOI,QAAQ,SAAAC,GACrBL,EAAMM,eAAeD,IACFL,EAAMK,GAAKG,OACXZ,IAAAA,EACNI,EAAMK,GAAKQ,aAIvBiB,SCxEO,UAAAC,MAIVC,IAAAA,EACAC,KAEAC,EAASH,EAETN,EAAgBD,IAEhBW,EAAUP,EAAcH,YAKnBW,iBACP,mBACA,WACOJ,GAAuC,YAAxBb,SAASkB,aAAAA,GAAAA,EACbJ,EACZ7B,QAAQ,SAASkC,SACVA,gBAWXC,GAAU,cACRC,GAAW,OACXL,EACSrB,EAAaqB,MAEVM,OAAOhB,EAAciB,cAE5BtC,QAAQ,SAAAuC,MACXC,GAAWD,EACXzC,EAAQR,EAAeiD,gBAIrBE,kBAAoB,iBAAMC,sBAAqBH,IAC9CI,EAAOC,OAAOD,EAAOE,EAAEf,EAAQhC,GAAQ0C,EAvCvC,gBAmDFI,OARI,iBACiB,YAAxB7B,SAASkB,YAAAA,GAAAA,EAEJE,KAEFN,EAAEV,KAAKgB","file":"habitat.min.js","sourcesContent":["const DEF_PROP_ATTR = 'data-prop';\nconst DEF_WIDGET_ID = 'data-widget';\nconst DEF_MOUNT = 'data-mount';\n\n/**\n * Capetalize every letter after `-`\n * @param  {String} str string\n * @return {String}     Capetalized string\n */\nconst _capetalize = str => {\n  return str.replace(/-([a-z])/ig, (all, letter) => {\n    return letter.toUpperCase();\n  });\n};\n\n/**\n * Get the props from a host element's data attributes\n * @param  {Element} tag The host element\n * @return {Object}     props object to be passed to the component\n */\nconst _habitatsProps = (tag, attr = DEF_PROP_ATTR) => {\n  let attrs = tag.attributes;\n  let props = {};\n\n  // ceck for another props attached to the tag\n  Object.keys(attrs).forEach(key => {\n    if (attrs.hasOwnProperty(key)) {\n      let dataAttrName = attrs[key].name;\n      let propName = dataAttrName.split(attr + `-`).pop();\n      propName = _capetalize(propName);\n      if (dataAttrName !== propName) {\n        let propValue = attrs[key].nodeValue;\n        props[propName] = propValue;\n      }\n    }\n  });\n  return props;\n};\n\n/**\n * Return array of 0 or more elements that will host our widget\n * @param  {id} attrId the data widget id attribute the host should have\n * @param  {document} scope  Docuemnt object or DOM Element as a scope\n * @return {Array}        Array of matching habitats\n */\nconst _habitatElms = (attrValue, attrKey = DEF_WIDGET_ID) => {\n  let hostNodes = [];\n  [].forEach.call(document.querySelectorAll(`[${attrKey}]`), queriedTag => {\n    if (attrValue === queriedTag.getAttribute(attrKey)) {\n      hostNodes.push(queriedTag);\n    }\n  });\n  return hostNodes;\n};\n\n/**\n * [_getWidgetScriptTag internal widget to provide the currently executed script]\n * @param  {document} document [Browser document object]\n * @return {HTMLElement}     [script Element]\n */\nconst _getWidgetScriptTag = () => {\n  return document.currentScript ||\n    (() => {\n      let scripts = document.getElementsByTagName('script');\n      return scripts[scripts.length - 1];\n    })();\n};\n\n// TODO: abstract and reuse with ./habitat.js _habitatsProps\nconst _getMountAttr = (script, attr = DEF_MOUNT) => {\n  let attrs = script.attributes;\n  let mountValue = null;\n  // ceck for another props attached to the tag\n  Object.keys(attrs).forEach(key => {\n    if (attrs.hasOwnProperty(key)) {\n      const dataAttrName = attrs[key].name;\n      if (dataAttrName === attr) {\n        mountValue = attrs[key].nodeValue;\n      }\n    }\n  });\n  return mountValue;\n};\n\nexport {\n  _habitatsProps,\n  _habitatElms,\n  _getWidgetScriptTag,\n  _getMountAttr,\n  _capetalize\n};\n","import preact from 'preact';\n\nimport {\n  _habitatElms,\n  _habitatsProps,\n  _getMountAttr,\n  _getWidgetScriptTag\n} from './lib/habitat';\n\nconst habitat = Widget => {\n  /**\n   * Helpers\n   */\n  let hasRendered = false; // flag to not render twice if document state has changed\n  let q = []; // q a function to execute when document is ready\n\n  let widget = Widget;\n  let root = null;\n  let currentScript = _getWidgetScriptTag(); // get current script\n\n  let mountTo = _getMountAttr(currentScript);\n\n  /**\n   * Regsiter event listener so Habitat render when DOM is ready / loaded\n   */\n  document.addEventListener(\n    'readystatechange',\n    () => {\n      if (!hasRendered && document.readyState !== 'loading') {\n        hasRendered = true;\n        q.forEach(function(fun) {\n          return fun();\n        });\n      }\n    },\n    false\n  );\n\n  /**\n   * private _render function that will be queued if the DOM is not render\n   * and executed immeidatly if DOM is ready\n   */\n  let _render = () => {\n    let habitats = null;\n    if (mountTo) {\n      habitats = _habitatElms(mountTo);\n    } else {\n      habitats = [].concat(currentScript.parentNode);\n    }\n    habitats.forEach(elm => {\n      let hostNode = elm;\n      let props = _habitatsProps(elm) || {};\n      /**\n       * add resize function as a prop\n       */\n      props.habitatMediaQuery = () => _getHabitatSizeQuery(elm);\n      return preact.render(preact.h(widget, props), hostNode, root);\n    });\n  };\n\n  let render = () => {\n    if (document.readyState !== 'loading') {\n      hasRendered = true;\n      return _render();\n    }\n    return q.push(_render);\n  };\n\n  return { render };\n};\n\nexport default habitat;\n"]}